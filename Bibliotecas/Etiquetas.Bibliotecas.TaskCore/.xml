<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Etiquetas.Bibliotecas.TaskCore</name>
    </assembly>
    <members>
        <member name="T:Etiquetas.Bibliotecas.TaskCore.HardwareInfo">
            <summary>
            Fornece informações do hardware de execução.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.HardwareInfo.ProcessorCount">
            <summary>Número de processadores lógicos detectados.</summary>
        </member>
        <member name="T:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue">
            <summary>
            Define o contrato para armazenamento e recuperação de parâmetros e valores de retorno de uma tarefa.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.NomeClasseChamou">
            <summary>Nome completo da classe e método que criou a instância.</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.IdTask">
            <summary>Identificador numérico da task.</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.NomeTask">
            <summary>Nome descritivo da task.</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.StatusTask">
            <summary>Estado atual da task.</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.CancellationController">
            <summary>Controlador de cancelamento (Token ou Source).</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.EncodingTexto">
            <summary>Definição de Encoding para Textos.</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.TaskCreationOptions">
            <summary>Opções de criação da <see cref="T:System.Threading.Tasks.Task"/>.</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.TotalParametros">
            <summary>
            Obtém o número total de parâmetros/valores esperados.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.Tipo">
            <summary>
            Dicionário que mapeia o índice do parâmetro para o seu tipo.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.Valor">
            <summary>
            Dicionário que armazena o valor bruto de cada parâmetro pelo seu índice.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.Nomes">
            <summary>
            Dicionário que mapeia nomes simbólicos de parâmetros para seus índices.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.ArmazenaVoid">
            <summary>
            Armazena um valor do tipo void no conjunto de parâmetros.
            </summary>
            <remarks>
            Este método é utilizado para registrar explicitamente que o retorno de uma tarefa não possui valor (void).
            </remarks>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.ArmazenaTimeOutTimeSpan(System.TimeSpan)">
            <summary>
            Define o tempo de espera máximo antes de ocorrer timeout, em <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="timeout">Intervalo de tempo antes do timeout.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.ArmazenaTimeOutMilliseconds(System.Int32)">
            <summary>
            Define o tempo de espera máximo antes de ocorrer timeout, em milissegundos.
            </summary>
            <param name="timeout">Tempo de timeout em milissegundos.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.ArmazenaTaskCreationOptions(System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Armazena as opções de criação de <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="options">Opções de criação de tarefa.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.ArmazenaCancellationToken(System.Threading.CancellationToken)">
            <summary>
            Armazena um token de cancelamento para a tarefa.
            </summary>
            <param name="token">Token de cancelamento.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.ArmazenaCancellationToken(System.Threading.CancellationTokenSource)">
            <summary>
            Armazena uma fonte de token de cancelamento para a tarefa.
            </summary>
            <param name="cancelToken">Fonte de token de cancelamento.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.ArmazenaEncoding(System.Text.Encoding)">
            <summary>
            Define a fonte de token de cancelamento.
            </summary>
            <param name="encoding">Fonte de token de cancelamento.</param>
            <returns>Instância corrente para encadeamento.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.ArmazenaNomeTask(System.String)">
            <summary>
            Atribui um nome simbólico à tarefa.
            </summary>
            <param name="nomeTask">Nome textual da tarefa.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.ArmazenaStatusTask(Etiquetas.Bibliotecas.TaskCore.TaskState)">
            <summary>
            Define o estado atual da task.
            </summary>
            <param name="status">Estado da task.</param>
            <returns>Instância corrente para encadeamento.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.ArmazenaNomeClasseChamou(System.String)">
            <summary>
            Armazena o nome da classe que chamou a instância atual.
            </summary>
            <param name="nomeClasseChamou">O nome completo da classe chamadora.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.ArmazenaTasksGrupo(Etiquetas.Bibliotecas.TaskCore.TasksGrupos)">
            <summary>  
            Armazena o grupo de tarefas associado à instância atual.  
            </summary>  
            <param name="grupoTasks">O grupo de tarefas a ser atribuído.</param>  
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.ArmazenaIdTask(System.Int32)">
            <summary>
            Atribui um identificador numérico à tarefa.
            </summary>
            <param name="id">Índice numérico da tarefa.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.Armazena``1(``0,System.String)">
            <summary>
            Armazena um valor genérico em sequência automática, com nome opcional.
            </summary>
            <typeparam name="T">Tipo do valor.</typeparam>
            <param name="value">Valor a armazenar.</param>
            <param name="nome">Nome opcional para indexação do valor.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Se a sequência ultrapassar a quantidade de parâmetros definida.
            </exception>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.Armazena``1(``0,System.Int32,System.String)">
            <summary>
            Armazena um valor genérico em posição específica, com nome opcional.
            </summary>
            <typeparam name="T">Tipo do valor.</typeparam>
            <param name="value">Valor a armazenar.</param>
            <param name="parametro">Índice (1-based) do parâmetro.</param>
            <param name="nome">Nome opcional para indexação do valor.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.RetornoIdTask">
            <summary>
            Recupera o valor associado ao identificador da tarefa.
            </summary>
            <returns>Valor armazenado em "Id".</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.RetornoNomeTask">
            <summary>
            Recupera o valor associado ao nome da tarefa.
            </summary>
            <returns>Valor armazenado em "NomeTask".</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.RetornoStatusTask">
            <summary>
            retorna o estado atual da tarefa.
            </summary> 
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.RetornoCancellationToken">
            <summary>
            Recupera o token de cancelamento armazenado.
            </summary>
            <returns>Token de cancelamento.</returns>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.RetornoEncoding">
            <summary>
            Recupera o Encoding do Texto.
            </summary>
            <returns>Encoding.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.RetornoCancellationTokenSource">
            <summary>
            Recupera o token de cancelamento armazenado.
            </summary>
            <returns>Token de cancelamento.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.RetornoTaskCreationOptions">
            <summary>
            Recupera as opções de criação de tarefa armazenadas.
            </summary>
            <returns>Opções de criação de tarefa.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.RetornoTimeOutMilliseconds">
            <summary>
            Recupera o timeout em milissegundos armazenado.
            </summary>
            <returns>Timeout em milissegundos.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.RetornoNomeClasseChamou">
            <summary>
            Recupera o nome completo da classe e método que criou a instância.
            </summary>
            <returns>O nome completo da classe e método que criou a instância.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.RetornoTasksGrupo">
            <summary>
            Recupera o grupo de tarefas associado.
            </summary>
            <returns>O grupo de tarefas armazenado.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.Retorno">
            <summary>
            Recupera o único valor armazenado, assumindo que haja apenas um parâmetro.
            </summary>
            <returns>Valor armazenado.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.Retorno(System.Int32)">
            <summary>
            Recupera o valor armazenado no índice especificado.
            </summary>
            <param name="parametro">Índice do parâmetro (1-based).</param>
            <returns>Valor armazenado.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.Retorno``1(System.String)">
            <summary>
            Recupera o valor armazenado por nome se existir.
            </summary>
            <param name="nome">Nome simbólico do parâmetro.</param>
            <returns>Valor armazenado.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.RetornaSeExistir``1(System.String)">
            <summary>
            Recupera o valor armazenado por nome se existir.
            </summary>
            <param name="nome">Nome simbólico do parâmetro.</param>
            <returns>Valor armazenado.</returns>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.Item(System.Int32)">
            <summary>
            Indexador para recuperar valor por índice.
            </summary>
            <param name="parametro">Índice do parâmetro.</param>
            <returns>Valor armazenado.</returns>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.Item(System.String)">
            <summary>
            Indexador para recuperar valor por nome.
            </summary>
            <param name="nome">Nome simbólico do parâmetro.</param>
            <returns>Valor armazenado.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue.CreateConverterContinue(System.Type)">
            <summary>
            Ponto de extensão para conversores adicionais caso o tipo não seja suportado.
            </summary>
            <param name="type">Tipo a ser convertido.</param>
            <param name="valor">Valor bruto a converter.</param>
            <returns>Função de conversão.</returns>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.UseSingleThread">
            <summary>
            Indica se o grupo de tasks deve ser executado em uma única thread.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.SchedulerTask">
            <summary>
            Parametro define o agendador de tarefas(TaskScheduler) associado ao grupo de tasks.
            Este agendador é utilizado para manipula o trabalho de nível baixo de enfileirar tarefas
            em threads.
            </summary>
        </member>
        <member name="E:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.TratamentoCancelamentoGrupo">
            <summary>
            Evento disparado quando uma task é cancelada.
            <see cref="!:GrupoTasks.HandleException(int,string,Exception)"/> dispara este evento em OperationCanceledException.
            </summary>
        </member>
        <member name="E:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.TratamentoTimeOutGrupo">
            <summary>
            Evento disparado quando uma task atinge timeout.
            <see cref="!:GrupoTasks.HandleException(int,string,Exception)"/> dispara este evento em TimeoutException.
            </summary>
        </member>
        <member name="E:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.TratamentoErroGrupo">
            <summary>
            Evento disparado quando ocorre erro em uma task.
            <see cref="!:GrupoTasks.HandleException(int,string,Exception)"/> dispara este evento para exceções genéricas.
            </summary>
        </member>
        <member name="E:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.Finalizacao">
            <summary>
            Evento disparado ao término do fluxo de execução de todas as tasks.
            Disparado em <see cref="!:IGrupoTasks.SubscribeProcessos()"/> no OnCompleted.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.AdicionarTask(System.Int32,System.Func{Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskParametros,System.Threading.Tasks.Task{Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue}},Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskParametros,System.String)">
            <summary>
            Adiciona uma nova task ao grupo, validando ID, função, parâmetros e nome.
            A implementação está em <c>GrupoTasks.AdicionarTask</c>.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.IniciarExecucao">
            <summary>
            Inicia a execução de todas as tasks adicionadas, montando os fluxos Rx.
            Chama internamente <see cref="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.MontarFluxoProcessos"/> e <see cref="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.MontarFluxoResultados(System.IObservable{System.Collections.Generic.KeyValuePair{System.Int32,System.Threading.Tasks.Task{Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue}}})"/>.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.CancelarGrupo">
            <summary>
            Cancela todas as tasks do grupo.
            Dispara <see cref="E:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.TratamentoCancelamentoGrupo"/> para cada task se implementado.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.CancelarTaskPorNome(System.String)">
            <summary>
            Cancela uma task específica pelo nome, sinalizando seu token individual.
            Referenciado em <see cref="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.CancelarTaskPorNome(System.String)"/>.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.ObterEstadoTask(System.Int32)">
            Obtém o estado corrente de uma task (AguardandoInicio, EmProcessamento, etc.).
            Usa <see cref="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.UpdateTaskState(System.Int32,Etiquetas.Bibliotecas.TaskCore.TaskState)"/> internamente.
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.AguardaTodasTasksAsync(System.Boolean)">
            <summary>
            Aguarda a conclusão de todas as tasks em execução.
            Implementado via Task.WhenAll em <see cref="!:GrupoTasks.AguardarTodasTasksAsync()"/>.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.AguardaTaskPorNomeAsync(System.String)">
            <summary>
            Aguarda e retorna o resultado de uma task específica pelo nome.
            Baseado em <see cref="!:GrupoTasks.AguardarTaskPorNomeAsync(string)"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.AguardaTaskPorNomeAsync(System.String[])" -->
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.ObterTodosResultadosPorIdAsync">
            <summary>
            Aguarda a conclusão de todas as tasks no grupo e retorna um dicionário
            contendo o ID de cada task como chave e o respectivo resultado como valor.
            
            Este método garante que todas as tasks sejam concluídas antes de retornar,
            capturando internamente quaisquer exceções que possam ocorrer durante a execução.
            
            Exceções:
            <exception cref="T:System.InvalidOperationException">Lançada se a execução ainda não foi iniciada.</exception>
            <exception cref="T:System.AggregateException">Lançada se ocorrerem falhas durante a execução das tasks.</exception>
            
            Uso:
            Este método é útil para obter os resultados finais das tasks após a execução completa do grupo,
            permitindo que os resultados sejam acessados por ID.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.ObterResultadosPorNomeAsync">
            <summary>
            Obtém os resultados das tasks em execução no grupo, mapeados pelo nome das tasks.
            
            Este método aguarda a conclusão de todas as tasks no grupo antes de retornar os resultados.
            Ele utiliza o dicionário interno de tasks em execução para criar um mapeamento entre
            os nomes das tasks e seus respectivos valores de retorno.
            
            Exceções:
            <exception cref="T:System.InvalidOperationException">Lançada se a execução ainda não foi iniciada.</exception>
            <exception cref="T:System.AggregateException">Lançada se ocorrerem falhas durante a execução das tasks.</exception>
            
            Uso:
            Este método é útil para obter os resultados finais das tasks após a execução completa do grupo,
            permitindo que os resultados sejam acessados por nome.
            </summary>
            <returns>Um dicionário somente leitura contendo os nomes das tasks como chave e os valores de retorno como valor.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.ObterResultadoPeloNomeAsync(System.String)">
            <summary>
            Aguarda e retorna o resultado(ITaskReturnValue) da task cujo nome foi informado.
            
            Este método utiliza o nome da task para localizar e aguardar sua conclusão.
            Ele chama internamente o método <see cref="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.ObterResultadosPelosNomesAsync(System.String[])"/>
            para obter o resultado da task especificada.
            
            Exceções:
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Lançada se a task com o nome especificado não for encontrada nos resultados.</exception>
            
            Uso:
            Este método é útil para obter o resultado de uma task específica após sua execução,
            garantindo que a task tenha sido concluída antes de acessar seu valor de retorno.
            </summary>
            <param name="nomeTask">O nome da task cujo resultado se deseja obter.</param>
            <returns>O valor de retorno da task, como <see cref="T:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue"/>.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.ObterResultadosPelosNomesAsync(System.String[])">
            <summary>
            Aguarda apenas as tasks cujos nomes estão em <paramref name="nomesTasks"/>,
            valida que estão registradas e em execução, e devolve um dicionário
            com o nome da task apontando para o seu ITaskReturnValue.
            </summary>
            <param name="nomesTasks">Array de nomes das Tasks a serem aguardadas.</param>
            <returns>
            Dicionário (nome → ITaskReturnValue) contendo o resultado de cada subtask.  
            Se alguma falhar, a exceção virá na Task.Result (lançada ao acessar).
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.Dispose" -->
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.TasksPoolGroupCompleted">
            <summary>  
            Obtém a fonte de conclusão de tarefa para o pool de tasks.  
             
            Esta propriedade é usada para sinalizar a conclusão de todas as tasks no grupo.  
            Quando todas as tasks são registradas e concluídas, a TaskCompletionSource é concluída,  
            permitindo que os assinantes saibam que o grupo de tasks foi finalizado.  
             
            Exceções:  
            <exception cref="T:System.InvalidOperationException">Lançada se a execução já foi iniciada anteriormente.</exception>  
            </summary>  
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.NomeGrupo">
            <summary>
            Nome descritivo para o grupo de tasks.
            <see cref="!:GrupoTasks.NomeGrupo"/> implementa a leitura interna deste valor.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.MaxDegreeOfParallelism">
            <summary>
            Máximo de tasks que podem rodar em paralelo.
            <see cref="!:GrupoTasks.MaxDegreeOfParallelism"/> define o comportamento do Merge no fluxo de processos.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.MontarFluxoProcessos">
            <summary>
            Define como montar o fluxo de processos (ID, Task) sem aguardar conclusão.
            Ligação: chamado por <see cref="!:IGrupoTasks.IniciarExecucao()"/> para criar o Observable de processos.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.MontarFluxoResultados(System.IObservable{System.Collections.Generic.KeyValuePair{System.Int32,System.Threading.Tasks.Task{Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue}}})">
            <summary>
            Define como transformar cada Task em ITaskReturnValue e encapsular eventos.
            Fluxo de resultados materializados (OnNext/OnError).
            Ligação: usado após <see cref="!:IGrupoTasks.MontarFluxoProcessos()"/> em <see cref="!:IGrupoTasks.IniciarExecucao()"/>.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.SubscribeProcessos">
            <summary>
            Inscreve no fluxo de processos para gerenciar OnNext, OnError e OnCompleted.
            Ligação: retornado em <see cref="!:IGrupoTasks.IniciarExecucao()"/> e armazena a subscription.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.SubscribeResultados">
            <summary>
            Inscreve no fluxo de resultados para tratar dados e erros de cada task.
            Ligação: retornado em <see cref="!:IGrupoTasks.IniciarExecucao()"/> e armazena a subscription.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.HandleExceptionAsync(System.Int32,System.String,System.Exception)">
            <summary>
            Trata exceções de uma task, atualiza estado e dispara eventos.
            Ligação: invocado em <see cref="!:IGrupoTasks.SubscribeResultados()"/> no NotificationKind.OnError.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.UpdateTaskState(System.Int32,Etiquetas.Bibliotecas.TaskCore.TaskState)">
            <summary>
            Atualiza internamente o estado de uma task.
            Ligação: usado em início de execução, OnNext e OnError de <see cref="!:IGrupoTasks.SubscribeResultados()"/>.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.CriarProcessEntry(System.Int32)">
            <summary>
            Cria a entry de processo para o ID informado, incluindo token e Task.
            Ligação: chamado dentro de <see cref="!:IGrupoTasks.MontarFluxoProcessos()"/> para inicializar cada Task.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos.CriarProcessEntryAsync(System.Int32)">
            <summary>
            Cria a entry de forma async de processo para o ID informado, incluindo token e Task.
            Ligação: chamado dentro de <see cref="!:IGrupoTasks.MontarFluxoProcessos()"/> para inicializar cada Task.
            </summary>
        </member>
        <member name="T:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue">
            <summary>
            Representa uma coleção de valores de retorno e parâmetros para uma task,
            permitindo armazenar, recuperar e converter múltiplos valores tipados.
            </summary>
            <remarks>
            Alterações aplicadas:
            1. Uso de CallerInfoAttributes para obter classe/método chamador sem StackTrace.
            2. Dicionário de conversores pré-inicializado para primitivos e Nullable&lt;T&gt;.
            3. Metadados expostos como propriedades fortemente tipadas com Fluent API.
            </remarks>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.NomeClasseChamou">
            <summary>Nome completo da classe e método que criou a instância.</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.IdTask">
            <summary>Identificador numérico da task.</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.NomeTask">
            <summary>Nome descritivo da task.</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.StatusTask">
            <summary>Estado atual da task.</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.CancellationController">
            <summary>Controlador de cancelamento (Token, Source ou Manager).</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.EncodingTexto">
            <summary>Definição de Encoding para Textos.</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.GrupoTasks">
            <summary>
            Grupo de tarefas associado à instância atual.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.RetornoCancellationToken">
            <summary>Token de cancelamento efetivo, extraído do controlador.</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.RetornoEncoding">
            <summary>
            Retorno do Encoding de texto.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.TaskCreationOptions">
            <summary>Opções de criação da <see cref="T:System.Threading.Tasks.Task"/>.</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.TimeoutMilliseconds">
            <summary>Timeout em milissegundos antes do cancelamento.</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.TotalParametros">
            <inheritdoc />
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.Tipo">
            <inheritdoc />
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.Valor">
            <inheritdoc />
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.Nomes">
            <inheritdoc />
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.SetaParametros(Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskParametros)">
            <summary>
            Configura os parâmetros internos da instância atual com base nos valores já fornecidos de outro parametros.
            </summary>
            <param name="parametros">Instância de <see cref="T:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskParametros"/> contendo os valores a serem configurados.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.SetaQuantidadeParametros(System.Int32)">
            <summary>
            Configura a quantidade de parâmetros permitidos para a instância atual.
            </summary>
            <param name="quantidadeParametros">Número de parâmetros a ser configurado. Deve ser maior ou igual a 1.</param>
            <exception cref="T:System.ArgumentException">Lançada quando o número de parâmetros é menor que 1.</exception>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.SetaNomeClasseChamou(System.String,System.String)">
            <summary>
            Configura o nome da classe e método que chamou a instância atual.
            </summary>
            <param name="sourceFilePath">Caminho completo do arquivo fonte do chamador. Este parâmetro é preenchido automaticamente pelo compilador.</param>
            <param name="memberName">Nome do membro chamador. Este parâmetro é preenchido automaticamente pelo compilador.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.ArmazenaIdTask(System.Int32)">
            <summary>
            Define o identificador da task.
            </summary>
            <param name="id">Identificador numérico.</param>
            <returns>Instância corrente para encadeamento.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.ArmazenaNomeTask(System.String)">
            <summary>
            Define o nome da task.
            </summary>
            <param name="nome">Nome textual.</param>
            <returns>Instância corrente para encadeamento.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.ArmazenaStatusTask(Etiquetas.Bibliotecas.TaskCore.TaskState)">
            <summary>
            Define o estado atual da task.
            </summary>
            <param name="status">Estado da task.</param>
            <returns>Instância corrente para encadeamento.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.ArmazenaCancellationToken(System.Threading.CancellationToken)">
            <summary>
            Define o token de cancelamento.
            </summary>
            <param name="token">Token de cancelamento.</param>
            <returns>Instância corrente para encadeamento.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.ArmazenaCancellationToken(System.Threading.CancellationTokenSource)">
            <summary>
            Define a fonte de token de cancelamento.
            </summary>
            <param name="cts">Fonte de token de cancelamento.</param>
            <returns>Instância corrente para encadeamento.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.ArmazenaEncoding(System.Text.Encoding)">
            <summary>
            Define a fonte de token de cancelamento.
            </summary>
            <param name="encoding">Fonte de token de cancelamento.</param>
            <returns>Instância corrente para encadeamento.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.ArmazenaTaskCreationOptions(System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Define as opções de criação da task.
            </summary>
            <param name="options">Opções de <see cref="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.TaskCreationOptions"/>.</param>
            <returns>Instância corrente para encadeamento.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.ArmazenaTimeOutMilliseconds(System.Int32)">
            <summary>
            Define o timeout em milissegundos.
            </summary>
            <param name="ms">Milissegundos de timeout.</param>
            <returns>Instância corrente para encadeamento.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.ArmazenaTimeOutTimeSpan(System.TimeSpan)">
            <summary>
            Define o timeout via <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="timeout">Intervalo de tempo.</param>
            <returns>Instância corrente para encadeamento.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.ArmazenaNomeClasseChamou(System.String)">
            <summary>
            Armazena o nome da classe que chamou a instância atual.
            </summary>
            <param name="nomeClasseChamou">O nome completo da classe chamadora.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.ArmazenaTasksGrupo(Etiquetas.Bibliotecas.TaskCore.TasksGrupos)">
            <summary>  
            Armazena o grupo de tarefas associado à instância atual.  
            </summary>  
            <param name="grupoTasks">O grupo de tarefas a ser atribuído.</param>  
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.ArmazenaVoid">
            <summary>
            Armazena um valor do tipo void no conjunto de parâmetros.
            </summary>
            <remarks>
            Este método é utilizado para registrar explicitamente que o retorno de uma tarefa não possui valor (void).
            </remarks>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.Armazena``1(``0,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.Armazena``1(``0,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.ArmazenaInternoNulo(System.Int32)">
            <summary>
            Tenta adicionar entrada nula para o parâmetro.
            </summary>
            <param name="parametro">Índice do parâmetro.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.ArmazenaInterno``1(``0,System.Int32,System.String)">
            <summary>
            Lógica interna comum de armazenamento de valor e tipo.
            </summary>
            <typeparam name="T">Tipo do valor.</typeparam>
            <param name="value">Valor a armazenar (pode ser null).</param>
            <param name="parametro">Índice do parâmetro.</param>
            <param name="nome">Nome opcional para indexação.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.ValorTryAddOrUpdate(System.Int32,System.Object)">
            <summary>
            Tenta adicionar ou atualizar o valor armazenado.
            </summary>
            <param name="parametro">Índice do parâmetro.</param>
            <param name="objeto">Valor a armazenar.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.TipoTryAddOrUpdate(System.Int32,System.Type)">
            <summary>
            Tenta adicionar ou atualizar o tipo associado.
            </summary>
            <param name="parametro">Índice do parâmetro.</param>
            <param name="tipo">Tipo do valor.</param>               
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.RetornoNomeTask">
            <inheritdoc />
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.RetornoStatusTask">
            <inheritdoc />
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.RetornoTaskCreationOptions">
            <inheritdoc />
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.RetornoTimeOutMilliseconds">
            <inheritdoc />
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.RetornoCancellationTokenSource">
            <inheritdoc />
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.RetornoNomeClasseChamou">
            <inheritdoc />
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.RetornoTasksGrupo">
            <inheritdoc />
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.Retorno">
            <inheritdoc />
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.Retorno(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.Retorno``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.RetornaSeExistir``1(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.ConvertValue(System.Object,System.Type)">
            <summary>
            Converte o valor bruto para o tipo alvo utilizando o cache de conversores.
            </summary>
            <param name="value">Valor bruto armazenado.</param>
            <param name="targetType">Tipo de destino para conversão.</param>
            <returns>Objeto convertido.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.InitializeConverters">
            <summary>
            Inicializa mapeamento de conversores para tipos primitivos e Nullable&lt;T&gt;.
            </summary>
            <returns>Dicionário de conversores padrão.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TaskReturnValue.CreateConverter(System.Type)">
            <summary>
            Fallback para conversão de tipos não primitivos e customizados.
            </summary>
            <param name="type">Tipo de destino.</param>
            <returns>Função de conversão para o tipo especificado.</returns>
        </member>
        <member name="T:Etiquetas.Bibliotecas.TaskCore.TasksGrupos">
             <summary>
             Gerencia e executa grupos de tarefas assíncronas, implementando a interface <see cref="T:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITasksGrupos"/>.
             Utiliza Task-based Asynchrony Pattern (TAP) em conjunto com Reactive Extensions (Rx) para
             orquestrar fluxos de execução, controlar paralelismo, cancelamento e tratamento de erros.
            
             Esta classe oferece flexibilidade na execução de múltiplas operações, mas o uso de Reactive Extensions
             implica uma curva de aprendizado. Recomenda-se familiaridade com os conceitos do Rx para pleno entendimento
             dos fluxos internos (<see cref="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.MontarFluxoProcessos"/>, <see cref="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.MontarFluxoResultados(System.IObservable{System.Collections.Generic.KeyValuePair{System.Int32,System.Threading.Tasks.Task{Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue}}})"/>).
             </summary>
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.MaxTokenRegistrationAttempts">
            <summary>
            Número máximo de tentativas para registrar CancellationToken no dicionário.
            </summary>
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.TokenRegistrationDelayMs">
            <summary>
            Delay em milissegundos entre tentativas de registro de token.
            </summary>
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.DefaultGroupNamePattern">
            <summary>
            Padrão para nome de grupo, caso não seja fornecido.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.UseSingleThread">
            <summary>  
            Define se o grupo de tasks deve ser executado em um único thread.  
            Quando definido como true, as tasks serão agendadas em um scheduler dedicado  
            para execução sequencial em um único thread.  
            Caso contrário, o agendamento será feito no scheduler padrão.  
            </summary> 
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.SchedulerTask">
            <summary>
            Scheduler utilizado para agendamento das tasks.
            Quando <see cref="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.UseSingleThread"/> é true, utiliza um scheduler dedicado para execução sequencial.
            Caso contrário, utiliza o scheduler padrão.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.UltimasExceptions">
            <summary>
            Lista somente leitura contendo as últimas exceções capturadas durante a execução das tasks do grupo.
            
            Esta propriedade é atualizada após a execução de todas as tasks, armazenando as exceções
            que ocorreram durante o processamento. Caso nenhuma exceção tenha ocorrido, a lista estará vazia.
            
            Uso:
            - Útil para análise de falhas e depuração.
            - Não relança as exceções automaticamente, permitindo que o chamador as trate conforme necessário.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.UltimasExceptionsPorId">
            <summary>
            Exceções capturadas por ID na última chamada de AguardaTaskPorNomeAsync.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.MaiorIdTasks">
            <summary>
            Informa o maior id inserido para uma Task.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.TasksPoolGroupCompleted">
            <summary>
            Source que indica o término do registro de todas as tasks.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.TasksPoolArrayCompleted">
            <summary>
            Source que indica o término do registro de Array de algumas tasks.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.NomeGrupo">
            <summary>
            Nome descritivo para o grupo de tasks.
            <see cref="!:GrupoTasks.NomeGrupo"/> implementa a leitura interna deste valor.
            </summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.MaxDegreeOfParallelism">
            <summary>
            Máximo de tasks que podem rodar em paralelo.
            <see cref="!:GrupoTasks.MaxDegreeOfParallelism"/> define o comportamento do Merge no fluxo de processos.
            </summary>
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.CtsGrupo">
            <summary>Token de cancelamento do grupo.</summary>
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.LockRegistroTask">
            <summary>
            
            </summary>
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.Executando">
            <summary>  
            Indica se o grupo de tasks está em execução.  
            Quando verdadeiro, significa que as tasks foram iniciadas e estão sendo processadas.  
            </summary>  
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.Funcoes">
            <summary>Funcões(Com metodos com parametros e retonos, para criação das Tasks.</summary>
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.ParametrosDict">
            <summary>Parâmetros de cada task.</summary>
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.NomeParaId">
            <summary>Nome da task para os ID.</summary>
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.ExecutandoTasks">
            <summary>Tasks em execução.</summary>
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.TaskResults">
            <summary>Resultados das tasks processadas.</summary>
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.Situacoes">
            <summary>Estados das tasks.</summary>
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos._errosAoAcessarResultado">
            <summary>Dicionário que armazena exceções encontradas ao tentar acessar o resultado de tasks falhadas.</summary>
        </member>
        <member name="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.ErrosAoAcessarResultado">
            <summary>
            Expõe um dicionário somente leitura contendo os IDs das tasks que falharam
            e cuja tentativa de acesso ao resultado foi feita através dos métodos ObterResultado*,
            mapeando para a exceção original que causou a falha.
            Nota: Retorna uma cópia para compatibilidade com .NET 4.5.
            </summary>
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.ProcessosStream">
            <summary>
            Fluxo de processos (OnNext) para execução paralela.
            </summary>
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.ResultadosStream">
            <summary>
            
            </summary>
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.ProcessosSubscription">
            <summary>
            
            </summary>
        </member>
        <member name="F:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.ResultadosSubscription">
            <summary>
            
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.#ctor(System.String,System.Threading.CancellationTokenSource,System.Boolean,System.Int32)">
            <summary>
            Construtor que inicializa o grupo de tasks.
            </summary>
            <param name="nomeGrupo">Nome descritivo do grupo (opcional).</param>
            <param name="tokenExterno">Token externo para cancelamento (opcional).</param>
        </member>
        <member name="E:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.TratamentoCancelamentoGrupo">
            <summary>
            Evento disparado quando uma task é cancelada.
            <see cref="!:GrupoTasks.HandleException(int,string,Exception)"/> dispara este evento em OperationCanceledException.
            </summary>
        </member>
        <member name="E:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.TratamentoTimeOutGrupo">
            <summary>
            Evento disparado quando uma task atinge timeout.
            <see cref="!:GrupoTasks.HandleException(int,string,Exception)"/> dispara este evento em TimeoutException.
            </summary>
        </member>
        <member name="E:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.TratamentoErroGrupo">
            <summary>
            Evento disparado quando ocorre erro em uma task.
            <see cref="!:GrupoTasks.HandleException(int,string,Exception)"/> dispara este evento para exceções genéricas.
            </summary>
        </member>
        <member name="E:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.Finalizacao">
            <summary>
            Evento disparado ao término do fluxo de execução de todas as tasks.
            Disparado em <see cref="!:IGrupoTasks.SubscribeProcessos()"/> no OnCompleted.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.AdicionarTask(System.Int32,System.Func{Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskParametros,System.Threading.Tasks.Task{Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue}},Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskParametros,System.String)">
            <summary>
            Adiciona uma nova task ao grupo, e garante que a tarefa seja registrada corretamente, com validações rigorosas para evitar conflitos de:
            IDs ou função, parâmetros e nome. Para assegurar que os dados necessários estejam presentes no Start da Task.
            </summary>
            <param name="id"></param>
            <param name="funcao"></param>
            <param name="parametros"></param>
            <param name="nomeTask"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.IniciarExecucao">
            <summary>  
            Inicia a execução de todas as tasks adicionadas ao grupo.  
             
            Este método monta os fluxos de processos e resultados utilizando Reactive Extensions (Rx).  
            Ele chama internamente os métodos:
            <see cref="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.MontarFluxoProcessos"/>
            e
            <see cref="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.MontarFluxoResultados(System.IObservable{System.Collections.Generic.KeyValuePair{System.Int32,System.Threading.Tasks.Task{Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue}}})"/>  
            para configurar os fluxos de execução paralela e de resultados.  
             
            Após a configuração, os fluxos são assinados para iniciar a execução das tasks e tratar os resultados.  
             
            Exceções:  
            <exception cref="T:System.InvalidOperationException">Lançada se a execução já foi iniciada anteriormente.</exception>  
            </summary>  
            <exception cref="T:System.InvalidOperationException"></exception>  
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.ObterEstadoTask(System.Int32)">
            <summary>  
            Obtém o estado(de enum TaskState) atual de uma task com base no ID fornecido.  
            </summary>  
            <param name="id">O identificador único da task.</param>  
            <returns>O estado da task, como <see cref="T:Etiquetas.Bibliotecas.TaskCore.TaskState"/>.</returns>  
            <remarks>  
            Retorna o estado da task se o ID for encontrado no dicionário de situações.  
            Caso contrário, retorna o estado padrão <see cref="F:Etiquetas.Bibliotecas.TaskCore.TaskState.AguardandoInicio"/>.  
            </remarks>  
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.AguardaTodasTasksAsync(System.Boolean)">
            <summary>
            Aguarda a conclusão de todas as tasks em execução no grupo.
            Este método captura internamente todas as exceções ocorridas durante a execução das tasks
            e as armazena na propriedade <see cref="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.UltimasExceptions"/>.
            Nenhuma exceção é relançada diretamente por este método.
            </summary>
            <remarks>
            É crucial que você verifique o conteúdo da propriedade <see cref="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.UltimasExceptions"/>
            após a conclusão deste método para identificar e tratar quaisquer falhas que possam ter ocorrido.
            Se <see cref="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.UltimasExceptions"/> não estiver vazia, indica que uma ou mais tasks falharam.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Lançada se a execução do grupo ainda não foi iniciada.</exception>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.AguardaTaskPorNomeAsync(System.String)">
            <summary>  
            Aguarda a conclusão de uma task específica pelo nome e retorna seu resultado.  
             
            Este método verifica se a task com o nome fornecido existe, se foi iniciada e se está em execução.  
            Caso contrário, lança exceções apropriadas.  
             
            Após validar as condições, ele aguarda a conclusão da task e retorna o valor de retorno associado.  
             
            Exceções:  
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Lançada se a task com o nome especificado não for encontrada.</exception>  
            <exception cref="T:System.InvalidOperationException">Lançada se a task ainda não foi iniciada ou não está em execução.</exception>  
            </summary>  
            <param name="nomeTask">O nome da task a ser aguardada.</param>  
            <returns>O valor de retorno da task, como <see cref="T:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue"/>.</returns>  
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.AguardaTaskPorNomeAsync(System.String[])">
            <summary>
            Aguarda apenas as Tasks cujos nomes foram passados em <paramref name="nomesTasks"/>.
            Verifica registro e início de execução, captura as exceções específicas por ID
            e armazena em <see cref="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.UltimasExceptionsPorId"/>, sem relançar nada.
            </summary>
            <param name="nomesTasks">Array de nomes das Tasks que se deseja aguardar.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.ObterTodosResultadosPorIdAsync">
            <summary>
            Aguarda a conclusão de todas as tasks no grupo e retorna um dicionário
            contendo o ID de cada task como chave e o respectivo resultado como valor.
            
            Este método garante que todas as tasks sejam concluídas antes de retornar,
            capturando internamente quaisquer exceções que possam ocorrer durante a execução.
            
            Exceções:
            <exception cref="T:System.InvalidOperationException">Lançada se a execução ainda não foi iniciada.</exception>
            <exception cref="T:System.AggregateException">Lançada se ocorrerem falhas durante a execução das tasks.</exception>
            
            Uso:
            Este método é útil para obter os resultados finais das tasks após a execução completa do grupo,
            permitindo que os resultados sejam acessados por ID.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.ObterResultadosPorNomeAsync">
            <summary>
            Obtém os resultados das tasks em execução no grupo, mapeados pelo nome das tasks.
            
            Este método aguarda a conclusão de todas as tasks no grupo antes de retornar os resultados.
            Ele utiliza o dicionário interno de tasks em execução para criar um mapeamento entre
            os nomes das tasks e seus respectivos valores de retorno.
            
            Exceções:
            <exception cref="T:System.InvalidOperationException">Lançada se a execução ainda não foi iniciada.</exception>
            <exception cref="T:System.AggregateException">Lançada se ocorrerem falhas durante a execução das tasks.</exception>
            
            Uso:
            Este método é útil para obter os resultados finais das tasks após a execução completa do grupo,
            permitindo que os resultados sejam acessados por nome.
            </summary>
            <returns>Um dicionário somente leitura contendo os nomes das tasks como chave e os valores de retorno como valor.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.ObterResultadoPeloNomeAsync(System.String)">
            <summary>
            Aguarda e retorna o resultado(ITaskReturnValue) da task cujo nome foi informado.
            
            Este método utiliza o nome da task para localizar e aguardar sua conclusão.
            Ele chama internamente o método <see cref="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.ObterResultadosPelosNomesAsync(System.String[])"/>
            para obter o resultado da task especificada.
            
            Exceções:
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Lançada se a task com o nome especificado não for encontrada nos resultados.</exception>
            
            Uso:
            Este método é útil para obter o resultado de uma task específica após sua execução,
            garantindo que a task tenha sido concluída antes de acessar seu valor de retorno.
            </summary>
            <param name="nomeTask">O nome da task cujo resultado se deseja obter.</param>
            <returns>O valor de retorno da task, como <see cref="T:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue"/>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.ObterResultadosPelosNomesAsync(System.String[])" -->
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.Dispose">
            <summary>          
            Libera todos os recursos utilizados pela instância de:
            <see cref="T:Etiquetas.Bibliotecas.TaskCore.TasksGrupos"/>.
            
            Este método descarta as assinaturas de fluxos de processos e resultados,
            limpa os dicionários internos e libera o token de cancelamento associado ao grupo.
            Após a chamada deste método, a instância não deve mais ser utilizada.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.CancelarGrupo">
            <summary>  
            Cancela todas as tasks do grupo.  
             
            Este método sinaliza o token de cancelamento associado ao grupo,  
            interrompendo a execução de todas as tasks que ainda não foram concluídas.  
             
            Exceções:  
            <exception cref="T:System.ObjectDisposedException">Lançada se o token de cancelamento já foi descartado.</exception>  
            </summary>  
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.CancelarTaskPorNome(System.String)">
            <summary>  
            Cancela uma task específica pelo nome dela.  
            </summary>  
            <param name="nomeTask">O nome da task a ser cancelada.</param>  
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Lançada se a task com o nome especificado não for encontrada.</exception>  
            <exception cref="T:System.InvalidOperationException">Lançada se o token de cancelamento da task não for encontrado.</exception>  
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.CancelarTaskPorId(System.Int32)">
            <summary>
            Cancela a task pelo seu identificador.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.TaskCallReturn(System.Func{Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskParametros,System.Threading.Tasks.Task{Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue}},Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskParametros)">
             <summary>
             Executa uma função assíncrona representada por <paramref name="funcTask"/> com os parâmetros fornecidos,
             utilizando a configuração atual do grupo de tasks, incluindo a política de agendamento (paralelo ou single-thread).
            
             Caso <see cref="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.UseSingleThread"/> esteja ativado, a execução será agendada no <see cref="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.SchedulerTask"/> do grupo.
             Quando em modo single-thread, a task é vinculada ao contexto da task chamadora usando <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent"/>,
             permitindo que seja considerada parte da hierarquia da task principal.
            
             Este método é ideal para chamadas auxiliares internas dentro de uma task já gerenciada pelo grupo,
             mantendo coesão no modelo assíncrono e respeitando os tokens de cancelamento herdados de <paramref name="parametros"/>.
            
             </summary>
             <param name="funcTask">A função assíncrona a ser executada, que recebe um <see cref="T:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskParametros"/> e retorna um <see cref="T:Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue"/>.</param>
             <param name="parametros">Os parâmetros necessários para execução da função, incluindo token de cancelamento e configurações adicionais.</param>
             <returns>Uma <see cref="T:System.Threading.Tasks.Task`1"/> representando o resultado da função executada.</returns>
             <exception cref="T:System.InvalidOperationException">Lançada caso a função fornecida seja nula.</exception>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.MontarFluxoProcessos">
             <summary>
             Monta o fluxo de processos(sequência de observables) para execução paralela das tasks no grupo sem aguardar conclusão.
            
             Este método utiliza Reactive Extensions (Rx) para criar um fluxo observável
             que gerencia a execução das tasks adicionadas ao grupo. Ele organiza as tasks
             com base em seus IDs, cria entradas de processo para cada uma e as executa
             respeitando o limite de paralelismo definido em <see cref="P:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.MaxDegreeOfParallelism"/>.
            
             O fluxo resultante é configurado para ser compartilhado entre múltiplos assinantes
             e é iniciado automaticamente quando uma assinatura é feita.
            
             Exceções:
             <exception cref="T:System.InvalidOperationException">Lançada se ocorrer um erro ao criar uma entrada de processo.</exception>
             </summary>
            
             Retorno:
             <returns>Um <see cref="T:System.IObservable`1"/> que emite pares de ID e Task para execução.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.MontarFluxoResultados(System.IObservable{System.Collections.Generic.KeyValuePair{System.Int32,System.Threading.Tasks.Task{Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue}}})">
            <summary>  
            Monta o fluxo de resultados para processar as tasks do grupo.  
             
            Este método utiliza Reactive Extensions (Rx) para transformar cada task em um fluxo observável  
            que encapsula os eventos de conclusão (OnNext) e erro (OnError).  
             
            Ele materializa os resultados das tasks, associando cada resultado ao ID correspondente,  
            e publica o fluxo para ser compartilhado entre múltiplos assinantes.  
            
            Ligação: usado após <see cref="!:IGrupoTasks.MontarFluxoProcessos()"/> em <see cref="!:IGrupoTasks.IniciarExecucao()"/>.
            Exceções:  
            <exception cref="T:System.InvalidOperationException">Lançada se ocorrer um erro ao processar os resultados.</exception>  
            </summary>  
            <param name="processos">O fluxo de processos contendo pares de ID e Task.</param>  
            <returns>Um <see cref="T:System.IObservable`1"/> que emite notificações de resultados das tasks em ITaskReturnValue.</returns>  
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.SubscribeProcessos">
            <summary>
            Inscreve no fluxo de processos para gerenciar os eventos OnNext, OnError e OnCompleted.
            
            Este método utiliza o fluxo de processos configurado em <see cref="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.MontarFluxoProcessos"/> para
            iniciar a execução das tasks no grupo. Ele trata os seguintes eventos:
            - OnNext: Ignorado, pois o processamento ocorre no fluxo de resultados.
            - OnError: Dispara o evento <see cref="E:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.TratamentoErroGrupo"/> para tratar erros globais.
            - OnCompleted: Dispara o evento <see cref="E:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.Finalizacao"/> para indicar que todas as tasks foram processadas.
            
            Ligação: retornado em <see cref="!:IGrupoTasks.IniciarExecucao()"/> e armazena a subscription.
            Exceções:
            <exception cref="T:System.InvalidOperationException">Lançada se ocorrer um erro durante a assinatura do fluxo.</exception>
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.SubscribeResultados">
            <summary>  
            Inicia a execução de todas as tasks adicionadas ao grupo.  
             
            Este método monta os fluxos de processos e resultados utilizando Reactive Extensions (Rx).  
            Ele chama internamente os métodos:
            <see cref="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.MontarFluxoProcessos"/>
            e
            <see cref="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.MontarFluxoResultados(System.IObservable{System.Collections.Generic.KeyValuePair{System.Int32,System.Threading.Tasks.Task{Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue}}})"/>  
            para configurar os fluxos de execução paralela e de resultados.  
             
            Após a configuração, os fluxos são assinados para iniciar a execução das tasks e tratar os resultados.  
             
            Exceções:  
            <exception cref="T:System.InvalidOperationException">Lançada se a execução já foi iniciada anteriormente.</exception>  
            </summary>  
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.CriarProcessEntryAsync(System.Int32)">
             <summary>  
             Método async que monta toda a lógica e cria a entrada de processo para o ID informado, incluindo token de cancelamento e Task associada.  
              
             Este método é responsável por inicializar a execução de uma task específica no grupo,  
             configurando os parâmetros necessários, como timeout e token de cancelamento.  
             Ele também atualiza o estado da task para "EmProcessamento" e armazena a task em execução no dicionário interno.  
            
             Exceções:  
             <exception cref="T:System.InvalidOperationException">Lançada se a função associada ao ID retornar uma task nula.</exception>  
             </summary>  
             <param name="id">O identificador único da task a ser criada.</param>  
             <returns>Um par contendo o ID da task e a Task associada.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.CriarProcessEntry(System.Int32)">
             <summary>  
             Método sincrono que monta toda a lógica e cria a entrada de processo para o ID informado, incluindo token de cancelamento e Task associada.  
              
             Este método é responsável por inicializar a execução de uma task específica no grupo,  
             configurando os parâmetros necessários, como timeout e token de cancelamento.  
             Ele também atualiza o estado da task para "EmProcessamento" e armazena a task em execução no dicionário interno.  
            
             Exceções:  
             <exception cref="T:System.InvalidOperationException">Lançada se a função associada ao ID retornar uma task nula.</exception>  
             </summary>  
             <param name="id">O identificador único da task a ser criada.</param>  
             <returns>Um par contendo o ID da task e a Task associada.</returns>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.HandleExceptionAsync(System.Int32,System.String,System.Exception)">
            <summary>
            Adiciona uma nova task ao grupo, garantindo que a tarefa seja registrada corretamente.
            
            Este método realiza validações rigorosas para evitar conflitos de IDs, funções, parâmetros e nomes.
            Ele assegura que os dados necessários estejam presentes antes do início da execução da task.
            
            Exceções:
            <exception cref="T:System.InvalidOperationException">Lançada se a execução já foi iniciada.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Lançada se o ID fornecido for menor ou igual a zero.</exception>
            <exception cref="T:System.ArgumentNullException">Lançada se a função ou os parâmetros forem nulos.</exception>
            <exception cref="T:System.ArgumentException">Lançada se já existir uma função, parâmetros ou nome duplicado para o ID fornecido.</exception>
            </summary>
            <param name="id">O identificador único da task.</param>
            <param name="funcao">A função que define a lógica da task.</param>
            <param name="parametros">Os parâmetros necessários para a execução da task.</param>
            <param name="nomeTask">O nome opcional da task. Se não fornecido, será gerado automaticamente.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.UpdateTaskState(System.Int32,Etiquetas.Bibliotecas.TaskCore.TaskState)">
            <summary>
            Atualiza o estado de uma task no grupo.
            
            Este método é utilizado para alterar o estado de uma task específica, identificada pelo seu ID,
            para um novo estado fornecido. Ele atualiza o dicionário interno de estados das tasks, garantindo
            que o estado atual seja refletido corretamente.
            
            Exemplo de estados possíveis: <see cref="F:Etiquetas.Bibliotecas.TaskCore.TaskState.AguardandoInicio"/>, <see cref="F:Etiquetas.Bibliotecas.TaskCore.TaskState.EmProcessamento"/>,
            <see cref="F:Etiquetas.Bibliotecas.TaskCore.TaskState.Finalizada"/>, entre outros.
            
            Exceções:
            <exception cref="T:System.ArgumentException">Lançada se o ID fornecido for inválido ou não existir no grupo.</exception>
            
            </summary>
            <param name="id">O identificador único da task cujo estado será atualizado.</param>
            <param name="state">O novo estado a ser atribuído à task.</param>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.ProcessaResultado(System.Collections.Generic.KeyValuePair{System.Int32,System.Threading.Tasks.Task{Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue}})">
            <summary>
            Trata o resultado (ou exceção) de UMA task individual.
            </summary>
        </member>
        <member name="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.CreateFaultedTask``1(System.Exception)">
            <summary>  
            Inicia a execução de todas as tasks adicionadas ao grupo.  
             
            Este método monta os fluxos de processos e resultados utilizando Reactive Extensions (Rx).  
            Ele chama internamente os métodos:
            <see cref="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.MontarFluxoProcessos"/>
            e
            <see cref="M:Etiquetas.Bibliotecas.TaskCore.TasksGrupos.MontarFluxoResultados(System.IObservable{System.Collections.Generic.KeyValuePair{System.Int32,System.Threading.Tasks.Task{Etiquetas.Bibliotecas.TaskCore.Interfaces.ITaskReturnValue}}})"/>  
            para configurar os fluxos de execução paralela e de resultados.  
             
            Após a configuração, os fluxos são assinados para iniciar a execução das tasks e tratar os resultados.  
             
            Exceções:  
            <exception cref="T:System.InvalidOperationException">Lançada se a execução já foi iniciada anteriormente.</exception>  
            </summary>  
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
    </members>
</doc>
